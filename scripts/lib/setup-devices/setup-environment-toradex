#!/bin/bash
# -*- mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Copyright (C) 2012-13 O.S. Systems Software LTDA.
# Copyright (C) 2017 Open Source Foundries Ltd.
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
# Adopted to Angstrom:  Khem Raj <raj.khem@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

_TDX_OEROOT=$(pwd)
cd "$_TDX_OEROOT"
if [ -n "$ZSH_VERSION" ]; then
    setopt sh_word_split
    setopt clobber
elif [ -n "$BASH_VERSION" ]; then
    set +o noclobber
fi

# DISTRO defaults to 'torizon' for am62(p)/imx8(m|p|SMARC)/imx95(verdin|SMARC)/am69/qemuarm64/genericx86-64 machines
# DISTRO defaults to 'torizon-upstream' for other machines
_TDX_DISTRO_DEFAULT="torizon-upstream" && echo "$MACHINE" | grep -E -q '(imx8|imx95|am62|am69|qemuarm64|genericx86-64)' && _TDX_DISTRO_DEFAULT="torizon"
DISTRO=${DISTRO:-$_TDX_DISTRO_DEFAULT}

if [ -z "${SDKMACHINE}" ]; then
    SDKMACHINE='x86_64'
fi

_TDX_MANIFESTS="${_TDX_OEROOT}"/.repo/manifests
_TDX_SCRIPTS="${_TDX_OEROOT}"/layers/meta-toradex-torizon/scripts

# We can be called with only 1 parameter max (build folder)
_TDX_BUILDDIR=${1:-build-$DISTRO}
# If current BUILDDIR is relative then prepend OEROOT
case ${_TDX_BUILDDIR} in
    /* ) ;;
    *  ) _TDX_BUILDDIR=$(readlink -f ${_TDX_BUILDDIR});;
esac
# Get rid of double slash. sed calls in OE staging_processfixme
# seems to have troubles if this makes it into OE variables.
_TDX_BUILDDIR=${_TDX_BUILDDIR%%/}

# Set BBPATH for recipetool
BBPATH=${_TDX_BUILDDIR}

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
PATH=$(echo "${PATH}" | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//')
PATH="${_TDX_OEROOT}/bitbake/bin:${_TDX_OEROOT}/.repo/repo:${PATH}"
PATH="${_TDX_OEROOT}/layers/openembedded-core/bitbake/bin:${PATH}"
PATH="${_TDX_OEROOT}/layers/openembedded-core/scripts:${PATH}"
# Remove duplicate path entries
PATH=$(echo "$PATH" |
       awk -F: '{for (i=1;i<=NF;i++) { if ( !x[$i]++ ) printf("%s:",$i); }}' |
       sed 's/:$//')

BB_ENV_PASSTHROUGH_ADDITIONS_OE="MACHINE DISTRO TCMODE TCLIBC HTTP_PROXY http_proxy \
HTTPS_PROXY https_proxy FTP_PROXY ftp_proxy FTPS_PROXY ftps_proxy ALL_PROXY \
all_proxy NO_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY \
SDKMACHINE BB_NUMBER_THREADS BB_NO_NETWORK PARALLEL_MAKE GIT_PROXY_COMMAND \
SOCKS5_PASSWD SOCKS5_USER SCREENDIR STAMPS_DIR BBPATH_EXTRA BB_SETSCENE_ENFORCE"

BB_ENV_PASSTHROUGH_ADDITIONS="$(echo $BB_ENV_PASSTHROUGH_ADDITIONS $BB_ENV_PASSTHROUGH_ADDITIONS_OE | tr ' ' '\n' | LC_ALL=C sort --unique | tr '\n' ' ')"

export PATH
export _TDX_BUILDDIR
export BBPATH
export BB_ENV_PASSTHROUGH_ADDITIONS

_TDX_AUTO_CONF_CREATED=0
mkdir -p "${_TDX_BUILDDIR}"/conf && cd "${_TDX_BUILDDIR}"
if [ -f "conf/auto.conf" ]; then
    oldmach=$(egrep "^MACHINE \?=" "conf/auto.conf" |
             sed -e 's%^MACHINE ?= %%' | sed -e 's/^"//' -e 's/"$//')
    olddisto=$(egrep "^DISTRO \?=" "conf/auto.conf" |
             sed -e 's%^DISTRO ?= %%' | sed -e 's/^"//' -e 's/"$//')
    eulaacpt=$(egrep '^\s*ACCEPT_FSL_EULA\s*=\s*\".*\"' conf/local.conf |
             sed -e 's%^\s*ACCEPT_FSL_EULA\s*=\s*%%' | sed -e 's/^"//' -e 's/"$//')
    _TDX_AUTO_CONF_CREATED=1
fi

if [ -e conf/checksum -a "${MACHINE}" = "$oldmach" -a "${DISTRO}" = "$olddisto" -a "${EULA}" = "$eulaacpt" ]; then
    if sha512sum --quiet -c conf/checksum >/dev/null 2>&1; then
        return 0
    fi
fi

# Evaluate new checksum and regenerate the conf files
sha512sum "${_TDX_SCRIPTS}"/lib/setup-devices/setup-environment-toradex 2>&1 > conf/checksum

if [ ! -f "conf/local.conf" ]; then
    cp "${_TDX_SCRIPTS}"/../conf/template/local.conf conf/local.conf
fi
ln -sf "${_TDX_SCRIPTS}"/../conf/template/bblayers.conf conf/bblayers.conf
ln -sf "${_TDX_MANIFESTS}"/README.md README.md
ln -sf "${_TDX_MANIFESTS}" "${_TDX_OEROOT}"/layers/

_TDX_MANIFEST_FILE="${_TDX_MANIFESTS}"/../manifest.xml
_TDX_INTEGRATION_BUILD=0

if [ -L "$_TDX_MANIFEST_FILE" ]; then
    if [ "$(basename `readlink -f "$_TDX_MANIFEST_FILE"`)" == "integration.xml" ] ||
       [ "$(basename `readlink -f "$_TDX_MANIFEST_FILE"`)" == "next.xml" ]; then
        _TDX_INTEGRATION_BUILD=1
    fi
else
    if cat $_TDX_MANIFEST_FILE | grep -q "torizon/integration.xml\|torizon/next.xml"; then
        _TDX_INTEGRATION_BUILD=1
    fi
fi

if [ "$_TDX_INTEGRATION_BUILD" = "1" ] && [ "$_TDX_AUTO_CONF_CREATED" = "0" ]; then
    cat > conf/auto.conf <<EOF
# This is needed when building on integration. With use-head-next you
# always get the newest software (u-boot, kernel, aktualizr-torizon, etc).
# Building on integration without use-head-next your build may fail.
DISTROOVERRIDES .= ":use-head-next"

EOF
fi

if [ "$_TDX_AUTO_CONF_CREATED" = "0" ]; then
    cat >> conf/auto.conf <<EOF
DISTRO ?= "${DISTRO}"
MACHINE ?= "${MACHINE}"
SDKMACHINE ?= "${SDKMACHINE}"

# Extra options that can be changed by the user
INHERIT += "rm_work cyclonedx-export"
EOF
else
    sed -i "s/^DISTRO ?= \"[^\"]*\"$/DISTRO ?= \"${DISTRO}\"/" conf/auto.conf
    sed -i "s/^MACHINE ?= \"[^\"]*\"$/MACHINE ?= \"${MACHINE}\"/" conf/auto.conf
    sed -i "s/^SDKMACHINE ?= \"[^\"]*\"$/SDKMACHINE ?= \"${SDKMACHINE}\"/" conf/auto.conf
fi

cat > conf/site.conf <<_EOF
SCONF_VERSION = "1"

# Where to store sources
DL_DIR ?= "${_TDX_OEROOT}/downloads"

# Where to save shared state
SSTATE_DIR ?= "${_TDX_OEROOT}/sstate-cache"

# Where to save the build system work output
TMPDIR = "${_TDX_BUILDDIR}/tmp"

# Where to save the packages and images
TI_COMMON_DEPLOY = "${_TDX_BUILDDIR}/deploy"
DEPLOY_DIR = "\${TI_COMMON_DEPLOY}\${@'' if d.getVar('BB_CURRENT_MC') == 'default' else '/\${BB_CURRENT_MC}'}"

# Go through the Firewall
#HTTP_PROXY = "http://${PROXYHOST}:${PROXYPORT}/"
_EOF

_TDX_EULA_ACCEPTED=""

# TI does not have an EULA that needs user acceptance. So in order to avoid
# showing NXP's EULA we just say that EULA was accepted for AM62.
# Same for QEMU and x86 variants.
if echo "${MACHINE}" | grep -q "verdin-am62\|aquila-am69\|qemuarm64\|genericx86-64"; then
    _TDX_EULA_ACCEPTED=1
fi

if egrep -q '^\s*ACCEPT_FSL_EULA\s*=\s*\"[^\"]*\"' conf/local.conf; then
    _TDX_EULA_ACCEPTED=1
fi

if [ -z "$_TDX_EULA_ACCEPTED" ] && [ -n "$EULA" ]; then
    # Freescale's EULA is not accepted int conf/local.conf but
    # user set the EULA environment variable, so we set
    # ACCEPT_FSL_EULA with $EULA value
    cat >> conf/local.conf <<EOF

# BSP depends on NXP packages and firmware which are covered by an
# End User License Agreement (EULA). To have the right to use these
# binaries in the image, ACCEPT_FSL_EULA must be set to '1'
ACCEPT_FSL_EULA = "$EULA"
EOF
elif [ -n "$_TDX_EULA_ACCEPTED" ]; then
    # Freescale's EULA has been accepted before and it is set in conf/local.conf.
    if [ -n "$EULA" ]; then
        # If EULA is not null, we change it to the value passed by it
        sed -i "s/^\s*ACCEPT_FSL_EULA\s*=\s*\"[^\"]*\"$/ACCEPT_FSL_EULA = \"${EULA}\"/" conf/local.conf
    fi
else
    # Freescale's EULA has not been accepted and EULA environment
    # variable is not set. Show user the EULA and ask they accept
    cat <<EOF

The BSP for $MACHINE depends on packages and firmware which are covered by an
End User License Agreement (EULA). To have the right to use these binaries
in your images, you need to read and accept the following...

EOF

    echo
    REPLY=
    while [ -z "$REPLY" ]; do
        echo -n "Would you like to read the EULA ? (y/n) "
        read -r REPLY
        case "$REPLY" in
            y|Y)
                READ_EULA=1
                ;;
            n|N)
                READ_EULA=0
                ;;
            *)
                REPLY=
                ;;
        esac
    done

    if [ "$READ_EULA" = 1 ]; then
        more -d "${_TDX_OEROOT}/layers/meta-freescale/EULA"
        echo
        REPLY=
        while [ -z "$REPLY" ]; do
            echo -n "Do you accept the EULA you just read? (y/n) "
            read -r REPLY
            case "$REPLY" in
                y|Y)
                    echo "EULA has been accepted."
                    cat >> conf/local.conf <<EOF

# BSP depends on NXP packages and firmware which are covered by an
# End User License Agreement (EULA). To have the right to use these
# binaries in the image, ACCEPT_FSL_EULA must be set to '1'
ACCEPT_FSL_EULA = "1"
EOF
                    ;;
                n|N)
                    echo "EULA has not been accepted."
                    ;;
                *)
                    REPLY=
                    ;;
            esac
        done
    fi
fi

cat <<EOF

Welcome to Toradex Torizon OS

For more information about OpenEmbedded see their website:

    http://www.openembedded.org/

Your build environment has been configured with:

    MACHINE = ${MACHINE}
    SDKMACHINE = ${SDKMACHINE}
    DISTRO = ${DISTRO}

You can now run 'bitbake <target>'

Some of common targets are:

    torizon-docker
    torizon-minimal
    torizon-podman

EOF

if [ "${MACHINE}" = "qemuarm64" ]; then
    cat <<EOF
You can run generated qemuarm64 image with runqemu by:

    runqemu qemuarm64

EOF
fi

if [ "${MACHINE}" = "genericx86-64" ]; then
    cat <<EOF
You can run generated genericx86-64 image with runqemu by:

    runqemu genericx86-64 ovmf

You can also run generated genericx86-64 image in VirtualBox by:

    Create a new machine by choosing 'Other Linux (64-bits)' type
    Choose an existing virtual hard disk file: deploy/images/genericx86-64/torizon-docker-genericx86-64.wic.vmdk
    Enable EFI boot mode through: Settings -> System -> Extended Features -> Enable EFI
    Start the machine

EOF
fi
