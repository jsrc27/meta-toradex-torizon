#!/bin/sh
# Copyright (C) 2023 Toradex AG.
# Licensed on MIT

SYSROOT_DIR="/sysroot"
COMPOSEFS_NAME=".ostree.cfs"
PREPARE_ROOT_CFG="/usr/lib/ostree/prepare-root.conf"

composefs_enabled() {
	return 0
}

composefs_error() {
	fatal "$@"
}

composefs_enable_fsverity_fs() {
	root_dev=$(mount | sed -ne "\#${ROOTFS_DIR}# {s# *\(/dev/[^ ]*\) .*#\1#p}")
	if [ ! -b "${root_dev}" ]; then
		msg "Could not determine root device!"
		return 1
	fi
	if tune2fs -l "${root_dev}" 2>/dev/null | \
	   grep -i 'filesystem features:.*\bverity\b' >/dev/null; then
		debug 'Feature "verity" is already enabled on the filesystem.'
	else
		if tune2fs -O verity "${root_dev}"; then
			msg 'Enabling "verity" feature on the filesystem succeeded.'
		else
			msg 'Enabling "verity" feature on the filesystem FAILED.'
			return 1
		fi
	fi

	return 0
}

# $1: number of currently processed items
# $2: total number of items to process
# $3: (optional) when set to "1", a newline is added at the end
composefs_progress() {
	bar_cur="${1}"
	bar_tot="${2}"
	bar_end="${3}"

	bar_curtm="$(date '+%s')"
	bar_updtm="${bar_updtm:-0}"
	bar_difftm="$((bar_curtm - bar_updtm))"
	if [ "${bar_difftm}" -lt 1 ] && [ "${bar_end}" != "1" ]; then
		# Update only once every second
		return
	fi
	bar_updtm="$(date '+%s')"

	bar_len="50"
	bar_done="$((bar_len * bar_cur / bar_tot))"
	bar_todo="$((bar_len - bar_done))"
	bar_str1="$(printf "%*s" ${bar_done} | tr ' ' '=')"
	bar_str2="$(printf "%*s" ${bar_todo} | tr ' ' '.')"
	bar_str3="$(printf "%d" ${bar_cur})"
	bar_str4="$(printf "%d" ${bar_tot})"

	bar_str="$(printf "\rProgress: [%s%s] (%5s/%5s)" "${bar_str1}" "${bar_str2}" "${bar_str3}" "${bar_str4}")"

	msg -n "${bar_str}"
	[ "${bar_end}" = "1" ] && msg ""
}

# We could replace this whole function by:
#
# $ ostree admin post-copy --sysroot="${SYSROOT_DIR}"
#
# However this would bring in the dependency of ostree to the ramdisk
# which doesn't look like a good idea. Instead, here we depend only on
# "findutils" and "fsverity-utils".
#
composefs_enable_fsverity_files() {
	nfiles="$(find "${SYSROOT_DIR}/ostree/repo/objects" \! -type d | wc -l)"
	count="0"

	# Enable verity in all repository objects.
	find "${SYSROOT_DIR}/ostree/repo/objects" \! -type d | while read fname; do
		composefs_progress "${count}" "${nfiles}"
		fsverity enable "${fname}" 2>/dev/null
		count=$((count + 1))
	done

	composefs_progress "${nfiles}" "${nfiles}" "1"

	# And also on the composefs file of every deployment.
	for cfsfile_ in "${SYSROOT_DIR}/ostree/deploy"/*/deploy/*/"${COMPOSEFS_NAME}"; do
		fsverity enable "${cfsfile_}" 2>/dev/null
	done
}

composefs_ensure_fsverity() {
	# Do we need fsverity?
	if [ ! -f "${PREPARE_ROOT_CFG}" ]; then
		debug "No ${PREPARE_ROOT_CFG} found - assuming fsverity is not needed"
		return 0
	fi

	# Allow setting composefs.enabled config via kernel cmdline;
	# "cfs.enabled" could be set to false|true|signed or any other value accepted
	# by "ostree-prepare-root".
	if [ "${bootparam_cfs_enabled}" ]; then
		debug "Overriding composefs.enabled: setting to ${bootparam_cfs_enabled}"
		sed -i -e "/^\[composefs\]/,/^\[.*\]/ {s/^enabled[[:space:]]*=.*\$/enabled = ${bootparam_cfs_enabled}/}" "${PREPARE_ROOT_CFG}"
	fi

	# Check configuration key composefs.enabled; this could be set to no|maybe|yes|signed.
	enabled="$(sed -n -e '/^\[composefs\]/,/^\[.*\]/ {s/^enabled[[:space:]]*=[[:space:]]*\([^[:space:]]*\)/\1/p}' "${PREPARE_ROOT_CFG}")"
	enabled="${enabled:-no}"
	debug "composefs.enabled=${enabled}"

	if [ "${enabled}" != "no" ]; then
		# Enable fsverity at the filesystem level; errors here would be detected upon
		# ostree deployment generation as well so we don't make them fatal here.
		composefs_enable_fsverity_fs
	fi

	if [ "${enabled}" != "signed" ]; then
		debug "composefs signing is not enabled in ${PREPARE_ROOT_CFG}"
		return 0
	fi

	if [ -z "${bootparam_ostree}" ]; then
		debug "ostree= parameter not passed in kernel cmdline"
		return 0
	fi

	# Determine deployment being booted from kernel cmdline:
	deployment="$(realpath -e "${SYSROOT_DIR}${bootparam_ostree}" 2>/dev/null)"
	cfsfile="${deployment}/${COMPOSEFS_NAME}"
	lockfile="${cfsfile}.rdlock"

	if [ -z "${deployment}" ]; then
		debug "Could not determine current deployment (ostree=${bootparam_ostree})"
		return 1
	fi

	# We want to enable fsverity in the following cases:
	#
	# - If the lockfile exists (fsverity enabling operation may have been interrupted).
	# - If fsverity is not enabled on the .cfs file.
	#
	if [ ! -f "${lockfile}" ] && fsverity measure "${cfsfile}" >/dev/null 2>/dev/null; then
		debug "fsverity is already enabled in storage"
		return 0
	fi

	# Stretch protected by a lockfile.
	# ---
	touch "${lockfile}" || return 1

	msg ""
	msg "Enabling fsverity on the ostree repository - this may take a few minutes."
	msg ""

	t0="$(date '+%s')"
	composefs_enable_fsverity_files
	t1="$(date '+%s')"

	# ---
	rm "${lockfile}"

	# Final result comes from measuring the composefs file (again):
	if fsverity measure "${cfsfile}" >/dev/null 2>/dev/null; then
		msg ""
		msg "Enabling fsverity succeeded (after $((t1 - t0)) seconds)."
	else
		msg ""
		msg "Enabling fsverity failed (system will not boot)."
		return 1
	fi

	return 0
}

composefs_run() {
	debug "Running composefs script..."

	if [ -d "${ROOTFS_DIR}" ]; then
		# When built with composefs support ostree-prepare-root will
		# look for objects under /sysroot which is actually the rootfs
		# directory in the ramdisk.
		ln -sf "${ROOTFS_DIR}" "${SYSROOT_DIR}"
		composefs_ensure_fsverity
	else
		debug "No rootfs has been set"
	fi
}
